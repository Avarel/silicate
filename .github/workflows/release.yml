
name: Build Releases
on:
  push:
    tags:
      - "v*.*.*"

env:
  BIN_NAME: silicate
  BUNDLE_NAME: Silicate

jobs:
  release_job:
    name: Create release
    runs-on: ubuntu-18.04
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: true

  build_job:
    name: Build release
    needs: release_job
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # don't fail other jobs if one fails
      matrix:
        build: [x86_64-linux, x86_64-macos, x86_64-windows]
        include:
        - build: x86_64-linux
          os: ubuntu-latest
          rust: stable
          target: x86_64-unknown-linux-gnu
          cross: false
        - build: x86_64-macos
          os: macos-latest
          rust: stable
          target: x86_64-apple-darwin
          cross: false
        - build: x86_64-windows
          os: windows-latest
          rust: stable
          target: x86_64-pc-windows-msvc
          cross: false
        # - build: aarch64-macos
        #   os: macos-latest
        #   rust: stable
        #   target: aarch64-apple-darwin
        # - build: aarch64-linux
        #   os: ubuntu-latest
        #   rust: stable
        #   target: aarch64-unknown-linux-gnu
        #   cross: true

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install ${{ matrix.rust }} toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Install cargo-bundle
        uses: actions-rs/cargo@v1
        if: matrix.os == 'macos-latest'
        with:
          use-cross: ${{ matrix.cross }}
          command: install
          args: cargo-bundle

      - name: Build release binary
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.cross }}
          command: build
          args: --release --locked --target ${{ matrix.target }}

      - name: Build macOS bundle
        uses: actions-rs/cargo@v1
        if: matrix.os == 'macos-latest'
        with:
          use-cross: ${{ matrix.cross }}
          command: bundle
          args: --release --target ${{ matrix.target }}

      - name: Package macOS DMG
        shell: bash
        if: matrix.os == 'macos-latest'
        run: >-
            hdiutil create "target/${{ matrix.target }}/release/bundle/osx/Silicate.dmg"
            -volname "Silicate"
            -srcfolder "target/${{ matrix.target }}/release/bundle/osx/Silicate.app" -ov

      - name: Build archive
        shell: bash
        run: |
          mkdir dist
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp "target/${{ matrix.target }}/release/$BIN_NAME.exe" "dist/$BUNDLE_NAME.exe"
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            cp "target/${{ matrix.target }}/release/bundle/osx/$BUNDLE_NAME.dmg" "dist/$BUNDLE_NAME.dmg"
          else
            cp "target/${{ matrix.target }}/release/$BIN_NAME" "dist/$BUNDLE_NAME"
          fi

      - name: Upload Windows Release
        uses: softprops/action-gh-release@v1
        if: matrix.os == 'windows-latest'
        with:
          files: dist/${{ env.BUNDLE_NAME }}.exe
      - name: Upload macOS Release
        uses: softprops/action-gh-release@v1
        if: matrix.os == 'macos-latest'
        with:
          files: dist/${{ env.BUNDLE_NAME }}.dmg
      - name: Upload Linux Release
        uses: softprops/action-gh-release@v1
        if: matrix.os == 'ubuntu-latest'
        with:
          files: dist/${{ env.BUNDLE_NAME }}