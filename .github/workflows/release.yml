
name: Build Releases
on:
  push:
    branches:
      - master

env:
  BIN_NAME: silicate
  BUNDLE_NAME: Silicate

jobs:
  dist:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # don't fail other jobs if one fails
      matrix:
        build: [x86_64-linux, x86_64-macos, x86_64-windows]
        include:
        - build: x86_64-linux
          os: ubuntu-latest
          rust: stable
          target: x86_64-unknown-linux-gnu
          cross: false
        - build: x86_64-macos
          os: macos-latest
          rust: stable
          target: x86_64-apple-darwin
          cross: false
        - build: x86_64-windows
          os: windows-latest
          rust: stable
          target: x86_64-pc-windows-msvc
          cross: false
        # - build: aarch64-macos
        #   os: macos-latest
        #   rust: stable
        #   target: aarch64-apple-darwin
        # - build: aarch64-linux
        #   os: ubuntu-20.04
        #   rust: stable
        #   target: aarch64-unknown-linux-gnu
        #   cross: true
        # - build: x86_64-win-gnu
        #   os: windows-2019
        #   rust: stable-x86_64-gnu
        #   target: x86_64-pc-windows-gnu
        # - build: win32-msvc
        #   os: windows-2019
        #   rust: stable
        #   target: i686-pc-windows-msvc

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install ${{ matrix.rust }} toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Install cargo-bundle
        uses: actions-rs/cargo@v1
        if: matrix.os == 'macos-latest'
        with:
          use-cross: ${{ matrix.cross }}
          command: install
          args: cargo-bundle

      # - name: Run cargo test
      #   uses: actions-rs/cargo@v1
      #   with:
      #     use-cross: ${{ matrix.cross }}
      #     command: test
      #     args: --release --locked --target ${{ matrix.target }}

      - name: Build release binary
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.cross }}
          command: build
          args: --release --locked --target ${{ matrix.target }}

      - name: Build macOS bundle
        uses: actions-rs/cargo@v1
        if: matrix.os == 'macos-latest'
        with:
          use-cross: ${{ matrix.cross }}
          command: bundle
          args: --release --target ${{ matrix.target }}

      - name: Build archive
        shell: bash
        run: |
          mkdir dist
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp "target/${{ matrix.target }}/release/$BIN_NAME.exe" "dist/"
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            cp -R "target/${{ matrix.target }}/release/bundle/osx/$BUNDLE_NAME.app" "dist/"
          else
            cp "target/${{ matrix.target }}/release/$BIN_NAME" "dist/"
          fi
      - uses: actions/upload-artifact@v2.2.4
        with:
          name: release-${{ matrix.build }}
          path: dist